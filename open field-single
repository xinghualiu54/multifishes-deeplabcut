import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
rcParams.update({'font.size': 14})
rcParams["figure.figsize"] = [12., 9.]
rcParams['font.family'] = 'sans-serif'
rcParams['font.sans-serif'] = ['Helvetica', 'DejaVu Sans']
from scipy.signal import savgol_filter
from scipy import interpolate
pd.set_option('display.max_rows', 15)
from pathlib import Path
import cv2 
import os
from matplotlib import cm
import csv
from scipy.signal import savgol_filter
import glob

import datetime
import numpy as np
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as plt
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon
from shapely.geometry import Point, LineString, Polygon
import math
import seaborn as sns
from matplotlib.patches import Circle
from matplotlib import colors
from scipy.ndimage import gaussian_filter
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

def removeLowLikely(data,nan_threshold):
    #nan_threshold=0.5
    for row in np.arange(np.shape(data)[0]):
        for col_id in np.arange(int(np.shape(data)[1]/3)):
            if data.iloc[row,col_id*3+2]<nan_threshold:
                data.iloc[row,col_id*3]=np.nan
                data.iloc[row,col_id*3+1]=np.nan
    return data

def smoothfunc(x,err,window):
    smooth=savgol_filter(x, window, 5, mode='nearest')
    for i in np.arange(len(smooth)):
        if np.abs(smooth[i]-x[i])>err:
            x[i]=x[i-1]
    return savgol_filter(x, 51, 3, mode='nearest')

def calcSpeed(bodypart):
    someX=data[bodypart].iloc[:,0].values
    
   # ixFinite=np.isfinite(someX)
    smooth=savgol_filter(someX, window_length=5, polyorder=2)
    midX=900
    ix_midX=np.argmin(abs(np.nan_to_num(smooth,nan=0)-midX))
    diff=np.diff(someX)
    plt.plot(someX,'o')
    plt.plot(smooth,'*')
    x=np.arange(ix_midX-int(0.2*len(data)),ix_midX+int(0.2*len(data)))
    y=smooth[x]
    z = np.polyfit(x, y, 1,full=True)
    #z = np.polyfit(x, y, 1,full=False)
    fit = np.poly1d(z[0])
    print(f"fitting residual: {z[1][0]:{7}.{3}}")
    plt.plot(x,fit(x),label="fit")
    speed_x=-fit[1]*px2cm*fps
    print(f"speed: {speed_x:{5}.{4}}")
    #plt.show()

def smoothFilter(someX):   
    someX_sasvgol=savgol_filter(someX, window_length=5, polyorder=1)
    ix=np.arange(len(someX))[~np.isnan(someX_sasvgol)]
    tck = interpolate.splrep(ix, someX_sasvgol[ix], s=0)
    xnew = np.arange(len(someX))
    ynew = interpolate.splev(xnew, tck, der=0)
    return np.arange(ix[0],ix[-1]), ynew[np.arange(ix[0],ix[-1])]

def calculate_angular_velocity(x, y, xc, yc):
    # Calculate the relative coordinates from the center of the circle
    rel_x = x - xc
    rel_y = y - yc

    # Calculate the angular velocity for each data point
    angular_velocity = np.arctan2(rel_y, rel_x)

    return angular_velocity



def calc_stride(x): 
    '''calculation of stride duration (in seconds) and stride length for a particular foot (in cm)
    '''
    #x=leftfront1_x
    real2nanPos=np.zeros(10)
    px_stride=np.zeros(10)  # pixle value of the feet position
    loc=0
    for i in np.arange(len(x)-1):
        if ~np.isnan(x[i]) & np.isnan(x[i+1]):
            real2nanPos[loc]=i
            px_stride[loc]=x[i]
            loc=loc+1

    stride_idx=real2nanPos[np.nonzero(real2nanPos)]
    stride_duration_average=np.average(np.diff(stride_idx))/fps
    px_stride_nonzero=px_stride[np.nonzero(px_stride)]
    px_stride_length=np.average(np.diff(px_stride_nonzero))*px2cm

    selectRange=x[int(stride_idx[0]):int(stride_idx[-1])]
    strideRatio=len(selectRange[~np.isnan(selectRange)])/len(selectRange)
    return stride_duration_average, -px_stride_length, strideRatio

def theta(A0,A1, B0, B1):
    '''
    vector A0->A1 and vector B0->B1

    '''
    A=A1-A0
    B=B1-B0
    cos=np.zeros(len(A))
    dotproduct=np.zeros(len(A))
    for i in np.arange(len(A)):
        dotproduct[i]=A[i,:].dot(B[i,:])
        cos[i]=dotproduct[i]/(np.linalg.norm(A[i,:])*np.linalg.norm(B[i,:]))

    return np.arccos(cos)*180/np.pi

def bodypartAve(bodypart,index,bdThreshold=0.8):    
    #bodypart='leftfrontbw2'
    bdlikely=data[bodypart].iloc[:,2]
    bd=data[bodypart].iloc[:,index].values
    bd[bdlikely<bdThreshold]=np.nan
    return np.nanmean(bd)
def get_mouse_coords(event, x, y, flags, param):
    global circle1_center, circle2_center
    if event == cv2.EVENT_LBUTTONDOWN:
        if len(points) == 0:
            circle1_center = (x, y)
            points.append((x, y))
        elif len(points) == 1:
            circle2_center = (x, y)
            points.append((x, y))
        else:
            return
